server:
  port: 8038

spring:
  application:
    name: oauth2-jwt
  profiles:
    active: dev

  #atomic配置
  jta:
    atomikos:
      properties:
        log-base-dir: ${atomikos.logdir}
        log-base-name: ${atomikos.logname}

  security:
    user:
      name: root
      password: 1234
#  datasource:
#    url: jdbc:mysql://192.168.2.221:3306/db_oauth2?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT
#    username: wanzhs
#    password: 123456
#    type: com.alibaba.druid.pool.DruidDataSource
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    druid:
#      # 下面为连接池的补充设置，应用到上面所有数据源中
#      # 初始化大小，最小，最大
#      initial-size: 5
#      min-idle: 5
#      max-active: 20
#      # 配置获取连接等待超时的时间
#      max-wait: 60000
#      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#      time-between-eviction-runs-millis: 60000
#      # 配置一个连接在池中最小生存的时间，单位是毫秒
#      min-evictable-idle-time-millis: 300000
#      validation-query: SELECT 1 FROM DUAL
#      test-while-idle: true
#      test-on-borrow: false
#      test-on-return: false
#      # 打开PSCache，并且指定每个连接上PSCache的大小
#      pool-prepared-statements: true
#      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#      max-pool-prepared-statement-per-connection-size: 20
#      filters: stat,wall
#      use-global-data-source-stat: true
#      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#      # 配置监控服务器
#      stat-view-servlet:
#        login-username: admin
#        login-password: 123456
#        reset-enable: false
#        url-pattern: /druid/*
#        # 添加IP白名单
#        #allow:
#        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高
#        #deny:
#      web-stat-filter:
#        # 添加过滤规则
#        url-pattern: /*
#        # 忽略过滤格式
#        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
eureka:
  instance:
    hostname: 192.168.2.221
    lease-expiration-duration-in-seconds: 2
    lease-renewal-interval-in-seconds: 1
  client:
    service-url:
      defaultZone: http://user:user@192.168.2.221:8032/eureka/



mysql:
  datasource:
    oauth:
      url: jdbc:mysql://${jdbc.oauth.url}?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false&allowPublicKeyRetrieval=true&&serverTimezone=GMT
      username: ${jdbc.oauth.username}
      password: ${jdbc.oauth.password}
      minPoolSize: 3
      maxPoolSize: 25
      maxLifetime: 20000
      borrowConnectionTimeout: 30
      loginTimeout: 30
      maintenanceInterval: 60
      maxIdleTime: 60
      testQuery: select 1